//TBC那里也需要依次按照调度表来发送
typedef unsigned short u16t;
#define TIME_SLOT_NUM 2000
#define WAIT //等待信号量
#define SIGNAL //释放信号量

struct schedultable_item
{
	u8t tdcn;
	u16t num;
	u16t begin_time_slot;
};
struct TBIM
{
	struct schedultable_item schedultable[TIME_SLOT_NUM];
	u16t asy_iso_num;//0 time slot and iso+asy timeslot;
	u16t time_slot_seq;//global time slot sequence;
};
struct TBIM tbim;
void tbim_init()
{
	u16t i;

	tbim.schedultable[0].tdcn=0;
	tbim.schedultable[0].begin_time_slot=0xffff;
	tbim.schedultable[0].num=0;

	for(i=1;i<TIME_SLOT_NUM;i++)
	{
		tbim.schedultable[i].tdcn=0;
		tbim.schedultable[i].num=0;
		tbim.schedultable[i].begin_time_slot=0;
	}
	tbim.asy_iso_num=0;
	tbim.time_slot_seq=0;
}
void get_assign_time_slot(u8t tdcn,u16t timeslot_seq,u16t num)
{
	tbim.schedultable[timeslot_seq].tdcn=tdcn;
	tbim.schedultable[timeslot_seq].num=num;
	tbim.schedultable[timeslot_seq].begin_time_slot=timeslot_seq;
}
void send_streaming_data()
{
	while(1)
	{
		WAIT; 
		//data=getdata(tbim.schedultable[tbim.time_slot_seq].tdcn);
		//TBIM_send_streaming_data(tbim.schedultable[tbim.time_slot_seq].tdcn,data);
	}
}
void TIM5_Handler()
{
	tbim.time_slot_seq=(tbim.time_slot_seq+1)%tbim.asy_iso_num;
	if(tbim.schedultable[tbim.time_slot_seq].begin_time_slot==tbim.time_slot_seq)//the first available time slot
		SIGNAL;
}






//-------------------------------
#define SIZE 10
struct cmd_item
{	
	u8t alias;
	u8t tdcn;
	u8t cmd_class;
	u8t cmd_func;
};

struct cmd_queue
{
	u8t count;
	u8t head;
	u8t tail;
	struct cmd_item queue[SIZE];
};

static struct cmd_queue queue;

void init_queue(void);
u8t has_upcomputer_cmd(void);
u8t isQempty(void);
u8t isQfull(void);
u8t enQueue(struct cmd_item item);
struct cmd_item deQueue(u8t* ret);




#include "cmd_queue.h"
void init_queue(void)
{
	queue.head=0;
	queue.tail=0;
	queue.count=0;
}
u8t isQempty(void)
{
	return queue.count==0;
}
u8t isQfull(void)
{
	return queue.head==(queue.tail+1)%SIZE;
}
u8t enQueue(struct cmd_item item)
{
	if(isQfull())
	{
		printf("Q full.\r\n");
		return 0;
	}
	++queue.count;
	queue.queue[queue.tail]=item;

	printf("enQ,%d\r\n",queue.count);
	queue.tail=(queue.tail+1)%SIZE;
	return 1;
}
struct cmd_item deQueue(u8t* ret)
{
	struct cmd_item item;
	item.alias=0;
	item.tdcn=0;
	item.cmd_class=0;
	item.cmd_func=0;
	if(isQempty())
	{
		printf("Q empty.\r\n");
		*ret=0;
		return item;
	}
	item=queue.queue[queue.head];
	queue.head=(queue.head+1)%SIZE;
	*ret=1;
	printf("deQ,%d\r\n",queue.count);
	--queue.count;
	return item;
}
u8t has_upcomputer_cmd(void)
{
	return queue.count;
}

u32t timeslot_seq;
u32t sum 